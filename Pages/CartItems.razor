@page "/cart-items"
@inject OrderServices OrderServices
@inject ISnackbar Snackbar
@inject MemberServices MemberServices
@inject NavigationManager NavManager
<style>
    body {
        background-color: #ffe6e6;
    }
</style>
<nav class="navbar navbar-light bg-light mb-5">
    <div class="container-fluid">
        <h3>Coffee Cart Items</h3>
    </div>
</nav>


    <table class="table table-hover table-bordered table-striped">
        <thead>
            <tr>
                <th>Coffee Name</th>
                <th>Coffee Type</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Total</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var context in Elements)
        {
            <tr>
                <td data-label="Item Name">@context.ItemName</td>
                <td data-label="Item Type">@context.ItemType</td>
                <td data-label="Price">@context.Price</td>

                <td data-label="Quantity">
                    <MudIconButton Icon="@Icons.Material.Filled.Remove" aria-label="subtract" OnClick="@(() => OnClickUpdateQuant(context.ID, "subtract"))"></MudIconButton>
                    @context.Quantity
                    <MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="subtract" OnClick="@(() => OnClickUpdateQuant(context.ID, "add"))"></MudIconButton>


                </td>
                <td data-label="Total Price">Rs @context.TotalPrice</td>

                <td data-label="Action">

                    <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="@(() => OnClickDelProd(context.ID))"></MudIconButton>
                   

                </td>
            </tr>
        }
    </tbody>
</table>


@if (_globalState.ProductsInCart.Count > 0)
{
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="ShowForm" Class="my-4">Checkout</MudButton>
}


    <MudDialog @bind-IsVisible="_isFormDisplayed" Options="dialogOptions">

        <TitleContent>
            <MudText Typo="Typo.h6">
                Enter Customer Details
            </MudText>
        </TitleContent>

        <DialogContent>
            <MudTextField @bind-Value="_name" Label="Customer Name" Variant="Variant.Outlined" Class="mb-5" Margin="Margin.Dense"></MudTextField>
            <MudTextField @bind-Value="_phoneNum" Label="Customer Phone Number" Variant="Variant.Outlined" Class="mb-5" Margin="Margin.Dense"></MudTextField>
        </DialogContent>

        <DialogActions>
            <MudButton Variant="Variant.Filled" DisableElevation="true" Color="Color.Secondary" @onclick="CartCheckout">Cart Checkout</MudButton>
            <MudButton Variant="Variant.Filled" DisableElevation="true" Color="Color.Error" @onclick="HideForm" Class="mr-5">Cancel</MudButton>
        </DialogActions>

    </MudDialog>




@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }

    private DialogOptions dialogOptions = new() { FullWidth = true };


    private double _totalAmt { set; get; } = 0;

    private bool _isFormDisplayed { get; set; } = false;

    private int _freeCoffeeCount { get; set; } = 0;

    private string _name { get; set; }
    private string _phoneNum { get; set; }


    private IEnumerable<OrderedProduct> Elements = new List<OrderedProduct>();

    protected override void OnInitialized()
    {
        Elements = _globalState.ProductsInCart;
        _totalAmt = OrderServices.CalcGrandTotal(_globalState.ProductsInCart);

    }


    private void OnClickUpdateQuant(Guid orderItemID, string action)
    {
        OrderServices.AdjustOrderItemQuantity(_globalState.ProductsInCart, orderItemID, action);
        _totalAmt = OrderServices.CalcGrandTotal(_globalState.ProductsInCart);

    }


    public void OnClickDelProd(Guid orderItemID)
    {
        OrderedProduct orderItem = _globalState.ProductsInCart.FirstOrDefault(x => x.ID == orderItemID);

        if (orderItem != null)
        {
            _globalState.ProductsInCart.Remove(orderItem);
        }

        _totalAmt = OrderServices.CalcGrandTotal(_globalState.ProductsInCart);

    }


    private void CartCheckout()
    {
        try
        {

            if (string.IsNullOrEmpty(_phoneNum) || string.IsNullOrEmpty(_name))
            {
                Snackbar.Add("Enter All Details", Severity.Error);
            }

            if (!Utils.IsNumeric(_phoneNum))
            {
                Snackbar.Add("Enter Valid Phone Number", Severity.Error);
                return;
            }


            Customer member = MemberServices.GetCustomerByPhoneNum(_phoneNum);

            if (member == null)
            {
                member = new()
                    {
                        Name = _name,
                        PhoneNum = _phoneNum
                    };

                MemberServices.AddMember(member);
            }
            else
            {
                MemberServices.UpdateOrderCount(_phoneNum);
            }

            _totalAmt = OrderServices.CalcGrandTotal(_globalState.ProductsInCart);


            Order order = new()
                {
                    MemberID = member.ID,
                    MemberName = member.Name,
                    MemberPhoneNum = member.PhoneNum,
                    OrderItems = _globalState.ProductsInCart,
                    GrandTotal = _totalAmt
                };


            OrderServices.PurchaseOrder(order);

            Snackbar.Add("Order is Placed", Severity.Success);

            _globalState.ProductsInCart = new List<OrderedProduct>();
            Elements = _globalState.ProductsInCart;

            _isFormDisplayed = false;

            StateHasChanged();


        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }


    private void ShowForm()
    {
        _isFormDisplayed = true;
        StateHasChanged();

    }
    private void HideForm()
    {
        _isFormDisplayed = false;
        StateHasChanged();

    }


}